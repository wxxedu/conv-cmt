use std::fmt::Display;

use console::Term;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
enum CommitError<'a> {
    TypeParseError { input: &'a str },
}

impl<'a> Display for CommitError<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match *self {
            CommitError::TypeParseError { input } => {
                write!(
                    f, 
                    "You've entered an invalid index {}, please enter a number between 1 and {}", 
                    input, 
                    CommitType::types().len()
                    )
            }
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
struct Commit<'a> {
    commit_type: CommitType,
    scope: Option<&'a str>,
    subject: &'a str,
}

impl<'a> Display for Commit<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let scope = match self.scope {
            Some(scope) => format!("({})", scope),
            None => String::new(),
        };
        write!(f, "{}{}: {}", self.commit_type, scope, self.subject)
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
enum CommitType {
    Feat,
    Fix,
    Docs,
    Style,
    Refactor,
    Test,
    #[default]
    Chore,
}

impl Display for CommitType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match *self {
            CommitType::Feat => write!(f, "feat"),
            CommitType::Fix => write!(f, "fix"),
            CommitType::Docs => write!(f, "docs"),
            CommitType::Style => write!(f, "style"),
            CommitType::Refactor => write!(f, "refactor"),
            CommitType::Test => write!(f, "test"),
            CommitType::Chore => write!(f, "chore"),
        }
    }
}

impl CommitType {
    pub fn describe(&self) -> &'static str {
        match *self {
            CommitType::Feat => "A new feature",
            CommitType::Fix => "A bug fix",
            CommitType::Docs => "Documentation only changes",
            CommitType::Style => {
                "Changes that do not affect the meaning of the code"
            }
            CommitType::Refactor => {
                "A code change that neither fixes a bug nor adds a feature"
            }
            CommitType::Test => {
                "Adding missing tests or correcting existing tests"
            }
            CommitType::Chore => {
                "Changes to the build process or auxiliary tools and libraries"
            }
        }
    }

    pub fn types() -> Vec<CommitType> {
        vec![
            CommitType::Feat,
            CommitType::Fix,
            CommitType::Docs,
            CommitType::Style,
            CommitType::Refactor,
            CommitType::Test,
            CommitType::Chore,
        ]
    }

    pub fn from_index_str(index: &str) -> Option<CommitType> {
        match index {
            "1" => Some(CommitType::Feat),
            "2" => Some(CommitType::Fix),
            "3" => Some(CommitType::Docs),
            "4" => Some(CommitType::Style),
            "5" => Some(CommitType::Refactor),
            "6" => Some(CommitType::Test),
            "7" => Some(CommitType::Chore),
            _ => None,
        }
    }
}

fn main() {
    let term = Term::stdout();
}
